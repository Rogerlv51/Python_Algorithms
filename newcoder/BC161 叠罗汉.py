# 糖和抖m在玩个游戏，规定谁输了就要请谁吃顿大餐：抖m给糖a b c三个驻， 
# 并在a柱上放置了数量为n的圆盘，圆盘的大小从上到下依次增大，
# 现在要做的事就是把a柱的圆盘全部移到c柱，移动的过程中保持小盘在上，大盘在下，
# 且限定圆盘只能够移动到相邻的柱子，即a柱子上的圆盘只能够移动到b，b柱子上的圆盘只能够移动到a或者c，
# c同理。现在请你设计一个程序，计算所需移动的最小步数， 帮助糖赢得大餐！

# 输入描述：
# 每一行输出有一个整数n(0<=n<26), 直至文件末尾。 注意这里输入还是挺坑的

### 这题实际上不就是解叠罗汉问题吗，注意理解其中的数学思想

import sys
cnt=0

def hanoi(n):
    global cnt
    # 最终状态判断,当无盘需要移动时停止
    # 注意实际上最后一步的移动是之前移动的子集
    # 不用自增cnt
    if(n==0):
        return
    # 1为最大盘,X是它上面的所有盘集合
    # --------------------
    # 1 0 X,一次移动n-1个盘
    hanoi(n-1)
    # --------------------
    # 将1 0 X > 0 1 X,即移动一次cnt+1
    cnt+=1
    # 注意步数自增了但是没调用函数
    # 因为三个柱没本质区别且最大盘X所在位置不影响移动
    # --------------------
    # 0 1 X > X 1 0
    hanoi(n-1)
    # --------------------
    # X 1 0 > X 0 1
    cnt+=1
    # --------------------
    # X 0 1 > 0 0 X/1
    hanoi(n-1)
    # --------------------

n = [i for i in sys.stdin.readlines()]
n = list(map(int, n))

for i in n:
    hanoi(i)
    print(cnt)
    cnt=0
